---
import { TRANSLATIONS, TRACKING_DATA } from '../consts.ts';
---

<section class="apple-route-tracking" id="tracking">
  <div class="container">
    <div class="tracking-header">
      <h2 class="section-title" data-text="routeTrackingTitle">实时路线追踪</h2>
      <div class="tracking-input-group">
        <input 
          type="text" 
          class="tracking-input" 
          id="tracking-number"
          data-placeholder="enterTrackingNumber"
          placeholder="请输入运单号"
        >
        <button class="tracking-button" data-text="track">追踪</button>
      </div>
    </div>
    
    <div class="tracking-result" id="tracking-result" style="display: none;">
      <div class="shipment-overview">
        <div class="status-card">
          <div class="status-indicator"></div>
          <div class="status-content">
            <h3 data-text="shipmentStatus">货物状态</h3>
            <p class="status-text" id="current-status">运输中</p>
            <p class="status-location" id="current-location">阿拉木图 → 库雷克港</p>
          </div>
          <div class="progress-ring">
            <svg class="progress-ring-svg" width="80" height="80">
              <circle class="progress-ring-bg" cx="40" cy="40" r="32" />
              <circle class="progress-ring-fill" cx="40" cy="40" r="32" id="progress-circle" />
            </svg>
            <div class="progress-text" id="progress-percent">45%</div>
          </div>
        </div>
        
        <div class="eta-card">
          <h4 data-text="estimatedArrival">预计到达</h4>
          <div class="eta-time" id="eta-time">8月20日 22:30</div>
        </div>
      </div>
      
      <div class="route-visualization">
        <h4 data-text="trackingHistory">追踪历史</h4>
        <div class="route-timeline" id="route-timeline">
          <!-- Timeline items will be populated by JavaScript -->
        </div>
      </div>
    </div>
    
    <div class="demo-section">
      <p class="demo-text">试试运单号: <span class="demo-number">HPF240816001</span></p>
    </div>
  </div>
</section>

<style>
.apple-route-tracking {
  padding: 80px 0;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  position: relative;
  overflow: hidden;
}

.apple-route-tracking::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at 30% 20%, rgba(0, 122, 255, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 70% 80%, rgba(52, 199, 89, 0.1) 0%, transparent 50%);
  pointer-events: none;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  position: relative;
  z-index: 1;
}

.tracking-header {
  text-align: center;
  margin-bottom: 60px;
}

.section-title {
  font-size: var(--text-6xl);
  font-weight: 700;
  color: var(--color-text);
  margin-bottom: 40px;
  letter-spacing: -0.02em;
}

.tracking-input-group {
  display: flex;
  justify-content: center;
  gap: 16px;
  max-width: 600px;
  margin: 0 auto;
  flex-wrap: wrap;
}

.tracking-input {
  flex: 1;
  min-width: 300px;
  padding: 16px 20px;
  border: 2px solid var(--color-border);
  border-radius: 12px;
  font-size: 16px;
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(20px);
  transition: all 0.3s ease;
}

.tracking-input:focus {
  outline: none;
  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(0, 122, 255, 0.1);
}

.tracking-button {
  padding: 16px 32px;
  background: var(--color-accent);
  color: white;
  border: none;
  border-radius: 12px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  white-space: nowrap;
}

.tracking-button:hover {
  background: var(--color-accent-hover);
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 122, 255, 0.3);
}

.tracking-result {
  margin-top: 60px;
  opacity: 0;
  transform: translateY(40px);
  transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.tracking-result.show {
  opacity: 1;
  transform: translateY(0);
}

.shipment-overview {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 24px;
  margin-bottom: 40px;
}

.status-card {
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  padding: 32px;
  display: flex;
  align-items: center;
  gap: 24px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.status-indicator {
  width: 16px;
  height: 16px;
  background: var(--color-success);
  border-radius: 50%;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.status-content {
  flex: 1;
}

.status-content h3 {
  font-size: 18px;
  font-weight: 600;
  color: var(--color-text-secondary);
  margin-bottom: 8px;
}

.status-text {
  font-size: 24px;
  font-weight: 700;
  color: var(--color-text);
  margin-bottom: 4px;
}

.status-location {
  font-size: 16px;
  color: var(--color-text-secondary);
}

.progress-ring {
  position: relative;
  width: 80px;
  height: 80px;
}

.progress-ring-svg {
  transform: rotate(-90deg);
}

.progress-ring-bg {
  fill: none;
  stroke: var(--color-border);
  stroke-width: 4;
}

.progress-ring-fill {
  fill: none;
  stroke: var(--color-accent);
  stroke-width: 4;
  stroke-linecap: round;
  stroke-dasharray: 201.06; /* 2π × 32 */
  stroke-dashoffset: 201.06;
  transition: stroke-dashoffset 1s ease;
}

.progress-text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 16px;
  font-weight: 700;
  color: var(--color-text);
}

.eta-card {
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  padding: 32px;
  text-align: center;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.eta-card h4 {
  font-size: 16px;
  font-weight: 600;
  color: var(--color-text-secondary);
  margin-bottom: 16px;
}

.eta-time {
  font-size: 28px;
  font-weight: 700;
  color: var(--color-text);
}

.route-visualization {
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  padding: 32px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.route-visualization h4 {
  font-size: 20px;
  font-weight: 600;
  color: var(--color-text);
  margin-bottom: 24px;
}

.route-timeline {
  position: relative;
}

.timeline-item {
  display: flex;
  align-items: flex-start;
  gap: 20px;
  margin-bottom: 32px;
  position: relative;
  opacity: 0;
  transform: translateX(-40px);
  animation: slideInTimeline 0.6s ease forwards;
}

.timeline-item:nth-child(n) {
  animation-delay: calc(var(--item-index) * 0.1s);
}

@keyframes slideInTimeline {
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.timeline-indicator {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  border: 3px solid;
  background: white;
  flex-shrink: 0;
  z-index: 2;
  position: relative;
}

.timeline-indicator.completed {
  background: var(--color-success);
  border-color: var(--color-success);
}

.timeline-indicator.in-progress {
  background: var(--color-accent);
  border-color: var(--color-accent);
  animation: pulse 2s infinite;
}

.timeline-indicator.pending {
  border-color: var(--color-border);
}

.timeline-content {
  flex: 1;
  padding-top: 2px;
}

.timeline-location {
  font-size: 18px;
  font-weight: 600;
  color: var(--color-text);
  margin-bottom: 4px;
}

.timeline-description {
  font-size: 14px;
  color: var(--color-text-secondary);
  margin-bottom: 4px;
}

.timeline-time {
  font-size: 12px;
  color: var(--color-text-secondary);
}

.timeline-item:not(:last-child)::after {
  content: '';
  position: absolute;
  left: 11px;
  top: 24px;
  width: 2px;
  height: calc(100% + 8px);
  background: linear-gradient(to bottom, var(--color-border) 0%, var(--color-border) 100%);
  z-index: 1;
}

.demo-section {
  text-align: center;
  margin-top: 60px;
  padding: 32px;
  background: rgba(255, 255, 255, 0.6);
  backdrop-filter: blur(20px);
  border-radius: 16px;
  border: 1px solid rgba(255, 255, 255, 0.3);
}

.demo-text {
  font-size: 16px;
  color: var(--color-text-secondary);
}

.demo-number {
  font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  font-weight: 600;
  color: var(--color-accent);
  cursor: pointer;
  text-decoration: underline;
  transition: color 0.3s ease;
}

.demo-number:hover {
  color: var(--color-accent-hover);
}

/* Responsive Design */
@media (max-width: 768px) {
  .apple-route-tracking {
    padding: 60px 0;
  }
  
  .section-title {
    font-size: var(--text-4xl);
  }
  
  .tracking-input-group {
    flex-direction: column;
    align-items: stretch;
  }
  
  .tracking-input {
    min-width: 100%;
  }
  
  .shipment-overview {
    grid-template-columns: 1fr;
  }
  
  .status-card {
    padding: 24px;
  }
  
  .eta-card {
    padding: 24px;
  }
  
  .route-visualization {
    padding: 24px;
  }
}
</style>

<script>
interface TrackingData {
  status: string;
  currentLocation: { zh: string; en: string; ru: string };
  progress: number;
  estimatedArrival: string;
  route: Array<{
    location: { zh: string; en: string; ru: string };
    status: string;
    timestamp: string;
    description: { zh: string; en: string; ru: string };
  }>;
}

class AppleRouteTracker {
  private currentLang: string = 'zh';
  private trackingData: Record<string, TrackingData>;
  private translations: any;

  constructor() {
    this.trackingData = (window as any).TRACKING_DATA || {};
    this.translations = (window as any).TRANSLATIONS || {};
    this.init();
  }

  init() {
    // Get current language
    this.currentLang = localStorage.getItem('language') || 'zh';
    this.updateTexts();

    // Bind events
    this.bindEvents();

    // Listen for language changes
    window.addEventListener('languageChange', (e: any) => {
      this.currentLang = e.detail.language;
      this.updateTexts();
    });
  }

  bindEvents() {
    const trackingButton = document.querySelector('.tracking-button') as HTMLButtonElement;
    const trackingInput = document.querySelector('.tracking-input') as HTMLInputElement;
    const demoNumber = document.querySelector('.demo-number') as HTMLElement;

    trackingButton?.addEventListener('click', () => this.handleTracking());
    trackingInput?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') this.handleTracking();
    });
    demoNumber?.addEventListener('click', () => {
      if (trackingInput) {
        trackingInput.value = 'HPF240816001';
        this.handleTracking();
      }
    });
  }

  updateTexts() {
    const t = this.translations[this.currentLang] || this.translations.zh;
    
    document.querySelectorAll('[data-text]').forEach(element => {
      const key = element.getAttribute('data-text');
      if (key && t[key]) {
        element.textContent = t[key];
      }
    });

    document.querySelectorAll('[data-placeholder]').forEach(element => {
      const key = element.getAttribute('data-placeholder');
      if (key && t[key]) {
        (element as HTMLInputElement).placeholder = t[key];
      }
    });
  }

  handleTracking() {
    const input = document.querySelector('.tracking-input') as HTMLInputElement;
    const trackingNumber = input.value.trim().toUpperCase();
    
    if (!trackingNumber) {
      this.showError('请输入运单号');
      return;
    }

    if (trackingNumber in this.trackingData) {
      this.displayTrackingResult(this.trackingData[trackingNumber]);
    } else {
      this.showError('运单号不存在，请检查后重试');
    }
  }

  displayTrackingResult(data: TrackingData) {
    const resultElement = document.getElementById('tracking-result');
    if (!resultElement) return;

    // Update status
    const currentLocation = document.getElementById('current-location');
    if (currentLocation) {
      currentLocation.textContent = data.currentLocation[this.currentLang as keyof typeof data.currentLocation];
    }

    // Update progress ring
    this.animateProgressRing(data.progress);

    // Update ETA
    this.updateETA(data.estimatedArrival);

    // Update timeline
    this.updateTimeline(data.route);

    // Show result with animation
    resultElement.style.display = 'block';
    setTimeout(() => {
      resultElement.classList.add('show');
    }, 100);

    // Scroll to result
    resultElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  animateProgressRing(progress: number) {
    const progressCircle = document.getElementById('progress-circle');
    const progressText = document.getElementById('progress-percent');
    
    if (progressCircle && progressText) {
      const circumference = 2 * Math.PI * 32; // 2π × radius
      const offset = circumference - (progress / 100) * circumference;
      
      setTimeout(() => {
        progressCircle.style.strokeDashoffset = offset.toString();
        this.animateNumber(progressText, 0, progress, 1500, '%');
      }, 200);
    }
  }

  updateETA(eta: string) {
    const etaElement = document.getElementById('eta-time');
    if (etaElement) {
      const date = new Date(eta);
      const formatted = this.formatDate(date);
      etaElement.textContent = formatted;
    }
  }

  formatDate(date: Date): string {
    const now = new Date();
    const isToday = date.toDateString() === now.toDateString();
    
    if (this.currentLang === 'zh') {
      const month = date.getMonth() + 1;
      const day = date.getDate();
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      
      if (isToday) {
        return `今天 ${hours}:${minutes}`;
      }
      return `${month}月${day}日 ${hours}:${minutes}`;
    } else if (this.currentLang === 'en') {
      if (isToday) {
        return `Today ${date.toLocaleTimeString('en', { hour: '2-digit', minute: '2-digit' })}`;
      }
      return date.toLocaleDateString('en', { 
        month: 'short', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit' 
      });
    } else { // ru
      if (isToday) {
        return `Сегодня ${date.toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' })}`;
      }
      return date.toLocaleDateString('ru', { 
        month: 'short', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit' 
      });
    }
  }

  updateTimeline(route: TrackingData['route']) {
    const timeline = document.getElementById('route-timeline');
    if (!timeline) return;

    timeline.innerHTML = '';

    route.forEach((item, index) => {
      const timelineItem = document.createElement('div');
      timelineItem.className = 'timeline-item';
      timelineItem.style.setProperty('--item-index', index.toString());

      const indicator = document.createElement('div');
      indicator.className = `timeline-indicator ${item.status.replace('_', '-')}`;

      const content = document.createElement('div');
      content.className = 'timeline-content';

      const location = document.createElement('div');
      location.className = 'timeline-location';
      location.textContent = item.location[this.currentLang as keyof typeof item.location];

      const description = document.createElement('div');
      description.className = 'timeline-description';
      description.textContent = item.description[this.currentLang as keyof typeof item.description];

      const time = document.createElement('div');
      time.className = 'timeline-time';
      time.textContent = new Date(item.timestamp).toLocaleString(this.currentLang);

      content.appendChild(location);
      content.appendChild(description);
      content.appendChild(time);

      timelineItem.appendChild(indicator);
      timelineItem.appendChild(content);

      timeline.appendChild(timelineItem);
    });
  }

  animateNumber(element: HTMLElement, start: number, end: number, duration: number, suffix: string = '') {
    const startTime = performance.now();
    
    const updateValue = (currentTime: number) => {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      const easeProgress = 1 - Math.pow(1 - progress, 3); // Ease out cubic
      
      const currentValue = start + (end - start) * easeProgress;
      element.textContent = Math.round(currentValue) + suffix;
      
      if (progress < 1) {
        requestAnimationFrame(updateValue);
      }
    };
    
    requestAnimationFrame(updateValue);
  }

  showError(message: string) {
    // Simple error handling - could be enhanced with a proper notification system
    alert(message);
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new AppleRouteTracker();
});
</script>