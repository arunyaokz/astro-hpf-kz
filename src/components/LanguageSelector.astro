---
// Language Selector Component
---

<div class="language-selector">
  <button class="lang-toggle" id="langToggle" aria-label="Switch Language">
    <span class="current-lang" id="currentLang">中文</span>
    <svg class="chevron" width="12" height="8" viewBox="0 0 12 8" fill="none">
      <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </button>
  
  <div class="lang-dropdown" id="langDropdown">
    <button class="lang-option" data-lang="zh">
      <span class="lang-name">中文</span>
      <span class="lang-code">CN</span>
    </button>
    <button class="lang-option" data-lang="en">
      <span class="lang-name">English</span>
      <span class="lang-code">EN</span>
    </button>
    <button class="lang-option" data-lang="ru">
      <span class="lang-name">Русский</span>
      <span class="lang-code">RU</span>
    </button>
  </div>
</div>

<style>
  .language-selector {
    position: relative;
    display: inline-block;
  }
  
  .lang-toggle {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 8px 12px;
    background: rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    color: var(--color-primary);
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(20px);
  }
  
  .lang-toggle:hover {
    background: rgba(0, 0, 0, 0.08);
    border-color: rgba(0, 0, 0, 0.2);
  }
  
  .chevron {
    transition: transform 0.2s ease;
  }
  
  .lang-toggle.active .chevron {
    transform: rotate(180deg);
  }
  
  .lang-dropdown {
    position: absolute;
    top: calc(100% + 8px);
    right: 0;
    min-width: 140px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 12px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4px);
    transition: all 0.2s ease;
    z-index: 1000;
  }
  
  .lang-dropdown.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .lang-option {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 12px 16px;
    background: none;
    border: none;
    font-size: 14px;
    color: var(--color-primary);
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .lang-option:first-child {
    border-radius: 12px 12px 0 0;
  }
  
  .lang-option:last-child {
    border-radius: 0 0 12px 12px;
  }
  
  .lang-option:hover {
    background: rgba(0, 122, 255, 0.1);
  }
  
  .lang-option.active {
    background: rgba(0, 122, 255, 0.15);
    color: var(--color-accent);
  }
  
  .lang-name {
    font-weight: 500;
  }
  
  .lang-code {
    font-size: 12px;
    opacity: 0.6;
    font-weight: 600;
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    .lang-dropdown {
      right: -8px;
      min-width: 120px;
    }
    
    .lang-option {
      padding: 10px 14px;
    }
  }
</style>

<script>
  class LanguageSelector {
    constructor() {
      this.currentLang = localStorage.getItem('language') || 'zh';
      this.toggle = document.getElementById('langToggle');
      this.dropdown = document.getElementById('langDropdown');
      this.currentLangSpan = document.getElementById('currentLang');
      this.options = document.querySelectorAll('.lang-option');
      
      this.init();
    }
    
    init() {
      this.updateUI();
      this.bindEvents();
    }
    
    bindEvents() {
      // Toggle dropdown
      this.toggle?.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleDropdown();
      });
      
      // Language selection
      this.options.forEach(option => {
        option.addEventListener('click', (e) => {
          const lang = e.currentTarget.dataset.lang;
          if (lang) {
            this.setLanguage(lang);
          }
        });
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', () => {
        this.closeDropdown();
      });
      
      // Close dropdown on escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.closeDropdown();
        }
      });
    }
    
    toggleDropdown() {
      const isActive = this.dropdown?.classList.contains('active');
      if (isActive) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }
    
    openDropdown() {
      this.toggle?.classList.add('active');
      this.dropdown?.classList.add('active');
    }
    
    closeDropdown() {
      this.toggle?.classList.remove('active');
      this.dropdown?.classList.remove('active');
    }
    
    setLanguage(lang) {
      this.currentLang = lang;
      localStorage.setItem('language', lang);
      this.updateUI();
      this.closeDropdown();
      
      // Dispatch custom event for other components
      window.dispatchEvent(new CustomEvent('languageChange', { 
        detail: { language: lang } 
      }));
      
      // Update page content
      this.updatePageContent(lang);
    }
    
    updateUI() {
      const langNames = {
        zh: '中文',
        en: 'English', 
        ru: 'Русский'
      };
      
      if (this.currentLangSpan) {
        this.currentLangSpan.textContent = langNames[this.currentLang] || '中文';
      }
      
      // Update active option
      this.options.forEach(option => {
        option.classList.toggle('active', option.dataset.lang === this.currentLang);
      });
    }
    
    updatePageContent(lang) {
      // Update all elements with data-i18n attributes
      document.querySelectorAll('[data-i18n]').forEach(element => {
        const key = element.getAttribute('data-i18n');
        const translation = this.getTranslation(lang, key);
        if (translation) {
          element.textContent = translation;
        }
      });
      
      // Update placeholders
      document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
        const key = element.getAttribute('data-i18n-placeholder');
        const translation = this.getTranslation(lang, key);
        if (translation) {
          element.setAttribute('placeholder', translation);
        }
      });
    }
    
    getTranslation(lang, key) {
      // This would integrate with your translation system
      // For now, return the key as fallback
      return key;
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new LanguageSelector();
  });
</script>